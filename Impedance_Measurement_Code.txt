#include "arm_math.h"
#include "stm32f4xx_hal.h"
#include <math.h>
#include <stdio.h>

#define FFT_SIZE 2048  // FFT length (must be power of 2)
#define SAMPLE_RATE 200000  // Sampling frequency in Hz
#define Rin 1000.0f  // Reference resistor value in ohms

// Frequency steps: Logarithmic steps from 100 Hz to 100 kHz
const float32_t frequency_steps[] = {100.0f, 500.0f, 1000.0f, 5000.0f, 10000.0f, 50000.0f, 100000.0f};
#define NUM_FREQ_STEPS (sizeof(frequency_steps) / sizeof(frequency_steps[0]))

float32_t vx_buffer[FFT_SIZE];  // Input buffer for Vx
float32_t vy_buffer[FFT_SIZE];  // Input buffer for Vy
float32_t vx_fft[FFT_SIZE];  // FFT output for Vx
float32_t vy_fft[FFT_SIZE];  // FFT output for Vy

arm_rfft_fast_instance_f32 fft_instance;

void PerformFFT(float32_t* input, float32_t* output) {
    arm_rfft_fast_f32(&fft_instance, input, output, 0);
}

void GetParts(float32_t Frequency, float32_t* output, float32_t* real, float32_t* imaginary) {
    int real_index = (int)ceil((Frequency * (FFT_SIZE / 2.0)) / SAMPLE_RATE);
    int imaginary_index = real_index + 1;

    *real = output[real_index];
    *imaginary = output[imaginary_index];
}

void Compute_Impedance(float32_t re_x, float32_t im_x, float32_t re_y, float32_t im_y, float32_t* Real_Oup, float32_t* Imaginary_Oup) {
    float denominator = (re_y * re_y) + (im_y * im_y);
    if (denominator != 0) {  // Avoid division by zero
        *Real_Oup = Rin * ((re_x * re_y) + (im_x * im_y)) / denominator;
        *Imaginary_Oup = Rin * ((im_x * re_y) - (re_x * im_y)) / denominator;
    } else {
        *Real_Oup = 0.0f;
        *Imaginary_Oup = 0.0f;
    }
}

int main() {
    HAL_Init();
    arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE);

    while (1) {
        for (uint8_t i = 0; i < NUM_FREQ_STEPS; i++) {
            float32_t frequency = frequency_steps[i];
            float32_t re_x, re_y, im_x, im_y, Real_Oup, Imaginary_Oup;

            // Assume vx_buffer and vy_buffer are filled with ADC data
            PerformFFT(vx_buffer, vx_fft);
            PerformFFT(vy_buffer, vy_fft);

            GetParts(frequency, vx_fft, &re_x, &im_x);
            GetParts(frequency, vy_fft, &re_y, &im_y);

            // Compute input impedance
            Compute_Impedance(re_x, im_x, re_y, im_y, &Real_Oup, &Imaginary_Oup);

            printf("Frequency: %.1f Hz | Real: %.3f | Imaginary: %.3f\n", frequency, Real_Oup, Imaginary_Oup);
        }
    }
}
